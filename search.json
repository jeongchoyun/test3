[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/기말레포트_빅.html",
    "href": "posts/기말레포트_빅.html",
    "title": "빅데이터 분석 기말 과제",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport sklearn.metrics\n\n\n의사결정나무의 수동구현은 위에서 제시된 모듈 (numpy, pandas, sklearn.metrics, matplotlib, seaborn) 만을 사용해야하며 이외의 모듈을 사용할 경우 0점 처리함.\nTrue/False를 판단하는 문제는 답만 써도 무방함. (이유를 써도 상관없음)\nTreu/False의 판단 문제는 모두 맞출 경우만 정답으로 인정함. 다만 틀린이유가 사소하다고 판단할경우 감점없이 만점처리함.\n\n\n1. 의사결정나무의 수동구현 (70점)\n\ndf_train = pd.read_csv('https://raw.githubusercontent.com/guebin/MP2023/master/posts/height_train.csv')\ndf_train\n\n\n\n\n\n\n\n\nweight\nsex\nheight\n\n\n\n\n0\nNaN\nmale\n164.227738\n\n\n1\nNaN\nmale\n165.798660\n\n\n2\n75.219015\nmale\n165.528672\n\n\n3\nNaN\nmale\n163.706442\n\n\n4\n81.476750\nmale\n165.501403\n\n\n...\n...\n...\n...\n\n\n275\n49.308558\nfemale\n148.587771\n\n\n276\nNaN\nmale\n164.822474\n\n\n277\nNaN\nmale\n163.907671\n\n\n278\nNaN\nmale\n161.674476\n\n\n279\n53.714772\nfemale\n146.775975\n\n\n\n\n280 rows × 3 columns\n\n\n\n(1) df_train에서 “sex”,“weight”를 설명변수로 “height”을 반응변수로 설정하라. 결측치가 있을 경우 결측값에 일괄적으로 -99로 채워넣어라.\n\nX = df_train.loc[:,'weight':'sex']\nX = X.fillna(-99)\ny = df_train['height']\n\n(2) height열의 평균으로 height의 값을 추정하라. 추정값을 yhat에 저장하라. sklearn.metrics.r2_score()을 이용하여 r2_score를 계산하라.\n\nyhat = np.full(len(y),y.mean())\nsklearn.metrics.r2_score(y,yhat)\n\n0.0\n\n\n(3) 아래를 계산하라.\n\nr = y - yhat\n\n여기에서 yhat은 (2)의 결과로 얻어진 적합값을 의미한다. 이제 r에 Weight를 기준으로 의사결정나무를 적용하여 아래와 같은 분할을 만들어라.\n\nX['weight'] &lt; c\nX['weight'] &gt;= c\n\nsklearn.metrics.r2_score()를 이용하여 최적의 \\(c\\)값을 구하여라.\n\nr = y - yhat;r.head()\n\n0    6.241209\n1    7.812131\n2    7.542143\n3    5.719914\n4    7.514874\nName: height, dtype: float64\n\n\n\ndef fit_predict(X,r,c):\n    X = np.array(X).reshape(-1)\n    r = np.array(r)\n    rhat = r*0\n    rhat[X&lt; c] = r[X&lt; c].mean()\n    rhat[X&gt;= c] = r[X &gt;= c].mean()\n    return rhat\n\n\ncuts = np.arange(X['weight'].min()+1, X['weight'].max())\nscore = np.array([sklearn.metrics.r2_score(r,fit_predict(X['weight'],r,c)) for c in cuts])\nplt.plot(cuts,score)\n\n\n\n\n\nc = cuts[score.argmax()]\nrhat = fit_predict(X['weight'],r,c)\nc, rhat[:5]\n\n(-98.0,\n array([ 6.86933485,  6.86933485, -5.86850461,  6.86933485, -5.86850461]))\n\n\n(4) (3)의 결과로 얻어진 아래의 분할을 고려하자.\nX['weight'] &gt;= c\n이 분할에서 depth=2 로 나무를 성장하고자 한다. 성장이가능한가? 성장이 가능하다면 이때 나무를 성장시키기 위한 변수로 weigth와 sex중 무엇이 적절한가? 왜 그렇다고 생각하는가?\n- 아래 결과 weight, sex의 r2_score가 같게 나왔다.\n[1] weight 분할\n\nX1 = X[X['weight'] &gt;= c]['weight']\ny1 = y[X['weight'] &gt;= c]\ny1hat = np.full(len(y1),y1.mean())\nr1 = y1 - y1hat\n\n\ncuts1 = np.arange(X1.min()+0.1, X1.max());cuts1\nscore1 = np.array([sklearn.metrics.r2_score(r1,fit_predict(X1,r1,c)) for c in cuts1])\nplt.plot(cuts1,score1)\n\n\n\n\n\nscore_weight = score1.max()\nc1 = cuts1[score1.argmax()]\nrhat1 = fit_predict(X1,r1,c1)\nc1, rhat1[:5]\n\n(56.38466063107373,\n array([12.99170343, 12.99170343, -4.68169493, 12.99170343, -4.68169493]))\n\n\n[2] sex 분할\n\nX2 = X[X['weight'] &gt;= c]['sex']\n\n\ndef fit_predict_sex(X,r):\n    X = np.array(X).reshape(-1)\n    r = np.array(r)\n    rhat = r*0\n    rhat[X == 'female'] = r[X == 'female'].mean()\n    rhat[X == 'male'] = r[X == 'male'].mean()\n    return rhat\n\n\nscore_sex = sklearn.metrics.r2_score(r1, fit_predict_sex(X2,r1))\n\n\nscore_weight, score_sex\n\n(0.9522972193365125, 0.9522972193365125)\n\n\n(5) (3)의 결과로 얻어진 아래의 분할을 고려하자.\nX['weight'] &lt; c\n이 분할에서 depth=2 로 나무를 성장하고자 한다. 성장이가능한가? 성장이 가능하다면 이때 나무를 성장시키기 위한 변수로 weigth와 sex중 무엇이 적절한가? 왜 그렇다고 생각하는가?\n- -99 이하인 경우, -99인 값이 하나이고 성별로 봤을 때도 남자 뿐이여서 성장 불가능하다.\n(6) (3)-(5)의 결과를 이용하여 depth=2인 의사결정나무에 의한 r의 적합값을 구하여라. 이를 이용하여 yhat을 update하라. 이때 학습률은 0.1로 설정하고 업데이트된 결과를 yhat2로 저장하라.\n그리고sklearn.metrics.r2_score()을 이용하여 y와 yhat2의 r2_score를 계산하라.\n힌트: 아래의 알고리즘이 동치임을 이용하라.\n\nyhat2 \\(\\leftarrow\\) yhat + 학습률 \\(\\times\\) rhat\nr2 \\(\\leftarrow\\) r - 학습률 \\(\\times\\) rhat, where r2 = y - yhat2\n\n\n# r[X['weight'] &lt; c]\nr[X['weight'] &gt;= c] = r1\nr = np.array(r)\n\n# rhat[X['weight'] &lt; c]\nrhat[X['weight'] &gt;= c] = rhat1\n\n\nyhat1 = y[X['weight'] &lt; c] # 몸무게가 -99인 사람들의 평균 키. 위에서 따로 구하지 않았음.\n\nyhat[X['weight'] &lt; c] = yhat1\nyhat[X['weight'] &gt;= c] = y1hat\n\nr[:5], rhat[:5], yhat[:5]\n\n(array([ 6.24120927,  7.81213147, 13.41064801,  5.71991353, 13.38337907]),\n array([ 6.86933485,  6.86933485, 12.99170343,  6.86933485, 12.99170343]),\n array([164.22773753, 165.79865973, 152.11802365, 163.7064418 ,\n        152.11802365]))\n\n\n\nyhat2 = yhat + 0.1*rhat\n\n\nsklearn.metrics.r2_score(y,yhat2)\n\n0.6247857411378884\n\n\n(7) (6)에서 학습률이 0.5일 경우 y와 yhat2의 r2_score를 계산하라.\n\nyhat3 = yhat + 0.5*rhat\n\n\nsklearn.metrics.r2_score(y,yhat3)\n\n0.7983541219186371\n\n\n\n\n2. 다음을 읽고 참거짓을 판단하라. (30점)\n(1) 의사결정나무에서 max_depth의 설정값이 커질수록 오버피팅의 위험이 있다. 답) 네\n(2) 배깅의 설명변수중 일부를 drop 하며 나무를 성장시킨다. 답) 네. 랜덤포레스트\n(3) 랜덤포레스트는 나무가지를 랜덤으로 성장시키기도 하고 파괴시키기도 한다. 답) 아니요\n(4) 부스팅은 여러가지 의사결정나무의 적합값을 평균내는 방식으로 최종예측을 한다. 답) 네\n(5) Accuracy는 분류문제에서 언제나 가장 합리적인 평가지표이다. 답) 아니요\n(6) 모듈49의 아래그림은 “sex == ‘male’” 일 경우 “sex=‘female’” 일때보다 항상(=모든 관측치에 대하여) 키의 예측값을 +2.1 만큼 보정해야 한다는 것을 의미한다. 답) 아니요\n\n(7) 모듈54에서 제시된 아래의 그림은 사실 전혀 고려할 필요가 없다. 답) 아니요..?? 전혀까지는 아니고 참고용으로만?\n\n왜냐하면 Exercise는 범주형, Weight_Loss는 연속형이므로 correlation값은 의미가 없기 때문이다. 답) 네. 실제로 상관관계가 있어도 0에 가까운 값이 나올 수 있기 때문에\n(8) 시계열분석에서 static_feature란 이미 알고있는 미래의 시계열자료를 의미한다. 답) 아니요\n(9) 모듈59에서 소개된 자전거대여자료와 같이 시간특징이 포함된 자료는 언제나 (과거를 기반으로 미래를 예측하는) 시계열분석을 하는 것이 올바르다. 답) 아니요\n(10) 모듈60에서 소개된 하이퍼파라메터 설정법을 이용하면 때때로 모형의 적합도를 높일 수 있다. 답) 네"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "test3",
    "section": "",
    "text": "빅데이터 분석 기말 과제\n\n\n\n\n\n\n\n\n\n\n\n\nDec 22, 2023\n\n\n정초윤\n\n\n\n\n\n\n  \n\n\n\n\nPost With Code\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nDec 22, 2023\n\n\nHarlow Malloc\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nDec 19, 2023\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  }
]